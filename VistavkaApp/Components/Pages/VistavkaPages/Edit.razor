@page "/vistavkas/edit"
@using Microsoft.EntityFrameworkCore
@using VistavkaApp.Data
@inject IDbContextFactory<VistavkaApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Редактировать</h1>

<h2>Выставка</h2>
<hr />
@if (Vistavka is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Vistavka" OnValidSubmit="UpdateVistavka" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Vistavka.VistavkaId" value="@Vistavka.VistavkaId" />
                <div class="mb-3">
                    <label for="vistavkaname" class="form-label">Название выставки:</label>
                    <InputText id="vistavkaname" @bind-Value="Vistavka.VistavkaName" class="form-control" />
                    <ValidationMessage For="() => Vistavka.VistavkaName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Описание:</label>
                    <InputText id="description" @bind-Value="Vistavka.Description" class="form-control" />
                    <ValidationMessage For="() => Vistavka.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datebegin" class="form-label">Дата начала:</label>
                    <InputDate id="datebegin" @bind-Value="Vistavka.DateBegin" class="form-control" />
                    <ValidationMessage For="() => Vistavka.DateBegin" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateend" class="form-label">Дата конца:</label>
                    <InputDate id="dateend" @bind-Value="Vistavka.DateEnd" class="form-control" />
                    <ValidationMessage For="() => Vistavka.DateEnd" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="place" class="form-label">Место:</label>
                    <InputText id="place" @bind-Value="Vistavka.Place" class="form-control" />
                    <ValidationMessage For="() => Vistavka.Place" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/vistavkas">Вернуться к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int VistavkaId { get; set; }

    [SupplyParameterFromForm]
    private Vistavka? Vistavka { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Vistavka ??= await context.Vistavkas.FirstOrDefaultAsync(m => m.VistavkaId == VistavkaId);

        if (Vistavka is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateVistavka()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Vistavka!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!VistavkaExists(Vistavka!.VistavkaId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/vistavkas");
    }

    private bool VistavkaExists(int vistavkaid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Vistavkas.Any(e => e.VistavkaId == vistavkaid);
    }
}
