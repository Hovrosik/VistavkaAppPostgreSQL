@page "/bilets/create"
@using Microsoft.EntityFrameworkCore
@using VistavkaApp.Data
@inject IDbContextFactory<VistavkaApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Создать</h1>

<h2>Билет</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Bilet" OnValidSubmit="AddBilet" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="dateofvisit" class="form-label">Дата посещения:</label> 
                <InputDate id="dateofvisit" @bind-Value="Bilet.DateOfVisit" class="form-control" /> 
                <ValidationMessage For="() => Bilet.DateOfVisit" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="price" class="form-label">Цена:</label> 
                <InputNumber id="price" @bind-Value="Bilet.Price" class="form-control" /> 
                <ValidationMessage For="() => Bilet.Price" class="text-danger" /> 
            </div>        
            @if(op==2)
            {
                <div class="mb-3">
                    <label for="vistavkaid" class="form-label">Выставка:</label>
                    <InputSelect id="vistavkaid" @bind-Value="Bilet.VistavkaId" class="form-control">
                        <option value="">...</option>
                        @if(vistavkas!=null) {
                            @foreach(var vistavka in vistavkas)
                            {
                                <option value="@vistavka.VistavkaId">@vistavka.VistavkaName</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Bilet.VistavkaId" class="text-danger" />
                </div>
                <input type="hidden" name="Bilet.PosetitelId" id="posetitelid" @bind="Bilet.PosetitelId" />
            }
            @if (op == 1)
            {
                <div class="mb-3">
                    <label for="posetitelid" class="form-label">Посетитель:</label>
                    <InputSelect id="posetitelid" @bind-Value="Bilet.PosetitelId" class="form-control">
                        <option value="">...</option>
                        @if (posetitels != null)
                        {
                            @foreach (var posetitel in posetitels)
                            {
                                <option value="@posetitel.PosetitelId">@posetitel.PosetitelName @posetitel.PosetitelSurname</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Bilet.PosetitelId" class="text-danger" />
                </div>
                <input type="hidden" name="Bilet.VistavkaId" id="vistavkaid" @bind="Bilet.VistavkaId" />
            }  
            <button type="submit" class="btn btn-primary">Создать</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="@($"bilets?id={id}&op={op}")">Вернуться к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int? id { get; set; }

    [SupplyParameterFromQuery]
    private int? op { get; set; }

    public IEnumerable<Vistavka> vistavkas = default!;

    public IEnumerable<Posetitel> posetitels = default!;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        if (id == null || op == null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        if (op == 2)
        {
            vistavkas = await context.Vistavkas.ToListAsync();
            Bilet.PosetitelId = id;
        }
        else
        {
            posetitels = await context.Posetitels.ToListAsync();
            Bilet.VistavkaId = id;
        }

    }

    [SupplyParameterFromForm]
    private Bilet Bilet { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBilet()
    {
        using var context = DbFactory.CreateDbContext();
        context.Bilets.Add(Bilet);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bilets?id="+id.ToString()+"&op="+op.ToString());
    }
}
