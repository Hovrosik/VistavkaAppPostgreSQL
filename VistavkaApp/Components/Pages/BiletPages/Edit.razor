@page "/bilets/edit"
@using Microsoft.EntityFrameworkCore
@using VistavkaApp.Data
@inject IDbContextFactory<VistavkaApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Редактировать</h1>

<h2>Билет</h2>
<hr />
@if (Bilet is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Bilet" OnValidSubmit="UpdateBilet" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Bilet.BiletId" value="@Bilet.BiletId" />
                <div class="mb-3">
                    <label for="dateofvisit" class="form-label">Дата посещения:</label>
                    <InputDate id="dateofvisit" @bind-Value="Bilet.DateOfVisit" class="form-control" />
                    <ValidationMessage For="() => Bilet.DateOfVisit" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Цена:</label>
                    <InputNumber id="price" @bind-Value="Bilet.Price" class="form-control" />
                    <ValidationMessage For="() => Bilet.Price" class="text-danger" />
                </div>
                @if (op == 2)
                {
                    <div class="mb-3">
                        <label for="vistavkaid" class="form-label">Выставка:</label>
                        <InputSelect id="vistavkaid" @bind-Value="Bilet.VistavkaId" class="form-control">
                            <option value="">...</option>
                            @if (vistavkas != null)
                            {
                                @foreach (var vistavka in vistavkas)
                                {
                                    <option value="@vistavka.VistavkaId">@vistavka.VistavkaName</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Bilet.VistavkaId" class="text-danger" />
                    </div>
                    <input type="hidden" name="Bilet.PosetitelId" id="posetitelid" @bind="Bilet.PosetitelId" />
                }
                @if (op == 1)
                {
                    <div class="mb-3">
                        <label for="posetitelid" class="form-label">Посетитель:</label>
                        <InputSelect id="posetitelid" @bind-Value="Bilet.PosetitelId" class="form-control">
                            <option value="">...</option>
                            @if (posetitels != null)
                            {
                                @foreach (var posetitel in posetitels)
                                {
                                    <option value="@posetitel.PosetitelId">@posetitel.PosetitelName @posetitel.PosetitelSurname</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Bilet.PosetitelId" class="text-danger" />
                    </div>
                    <input type="hidden" name="Bilet.VistavkaId" id="vistavkaid" @bind="Bilet.VistavkaId" />
                }
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="@($"bilets?id={id}&op={op}")">Вернуться к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int BiletId { get; set; }

    [SupplyParameterFromQuery]
    private int? op { get; set; }

    private int? id { get; set; }

    [SupplyParameterFromForm]
    private Bilet? Bilet { get; set; }

    public IEnumerable<Vistavka> vistavkas = default!;

    public IEnumerable<Posetitel> posetitels = default!;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Bilet ??= await context.Bilets.FirstOrDefaultAsync(m => m.BiletId == BiletId);

        if (op == null || Bilet is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        if (op == 2)
        {
            vistavkas = await context.Vistavkas.ToListAsync();
            id = Bilet!.PosetitelId;
        }
        else
        {
            posetitels = await context.Posetitels.ToListAsync();
            id = Bilet!.VistavkaId;
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBilet()
    {
        using var context = DbFactory.CreateDbContext();

        Bilet!.Vistavka = null;
        Bilet!.Posetitel = null;

        context.Attach(Bilet!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BiletExists(Bilet!.BiletId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/bilets?id="+id.ToString()+"&op="+op.ToString());
    }

    private bool BiletExists(int biletid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Bilets.Any(e => e.BiletId == biletid);
    }
}
