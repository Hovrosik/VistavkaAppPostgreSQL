@page "/bilets/delete"
@using Microsoft.EntityFrameworkCore
@using VistavkaApp.Data
@inject IDbContextFactory<VistavkaApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Удалить</h1>

<p>Вы уверены, что хотите удалить?</p>
<div>
    <h2>Билет</h2>
    <hr />
    @if (bilet is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Дата посещения</dt>
            <dd class="col-sm-10">@bilet.DateOfVisit</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Цена</dt>
            <dd class="col-sm-10">@bilet.Price</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Выставка</dt>
            <dd class="col-sm-10">@bilet!.Vistavka!.VistavkaName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Посетитель</dt>
            <dd class="col-sm-10">@bilet!.Posetitel!.PosetitelName @bilet!.Posetitel!.PosetitelSurname</dd>
        </dl>
        <EditForm method="post" Model="bilet" OnValidSubmit="DeleteBilet" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(bilet is null)">Delete</button> |
            <a href="@($"/bilets?op={op}&id={id}")">Вернуться к списку</a>
        </EditForm>
    }
</div>

@code {
    private Bilet? bilet;

    [SupplyParameterFromQuery]
    private int BiletId { get; set; }

    [SupplyParameterFromQuery]
    private int? op { get; set; }

    private int? id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        bilet = await context.Bilets.Include(d => d.Vistavka).Include(d => d.Posetitel).FirstOrDefaultAsync(m => m.BiletId == BiletId);

        if (bilet is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        if (op == 1)
        {
            id = bilet!.VistavkaId;
        }
        else
        {
            id = bilet!.PosetitelId;
        }
    }

    private async Task DeleteBilet()
    {
        using var context = DbFactory.CreateDbContext();
        context.Bilets.Remove(bilet!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bilets?op="+op.ToString()+"&id="+id.ToString());
    }
}
